"use strict";var security=angular.module("sh1n.angular-security",[]);security.constant("AUTH_ENDPOINTS",{LOGOUT:"security/logout",LOGIN:"security/login",PROFILE:"security/profile"}),security.constant("AUTH_EVENTS",{loginSuccess:"auth-login-success",loginFailed:"auth-login-failed",logoutSuccess:"auth-logout-success",sessionTimeout:"auth-session-timeout",notAuthenticated:"auth-not-authenticated",notAuthorized:"auth-not-authorized"}),security.factory("AuthInterceptor",["$rootScope","$q","AUTH_EVENTS",function($rootScope,$q,AUTH_EVENTS){return{responseError:function(response){return $rootScope.$broadcast({401:AUTH_EVENTS.notAuthenticated,403:AUTH_EVENTS.notAuthorized,419:AUTH_EVENTS.sessionTimeout,440:AUTH_EVENTS.sessionTimeout}[response.status],response),$q.reject(response)}}}]),security.config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$injector",function($injector){return $injector.get("AuthInterceptor")}])}]),security.service("Session",function(){this.create=function(userId,loginName,userRoles){this.userId=userId,this.loginName=loginName,this.userRoles=userRoles,this.loggedIn=!0},this.destroy=function(){this.userId=null,this.userRoles=null,this.loginName=null,this.loggedIn=!1}}),security.factory("AuthService",["$http","Session","AUTH_ENDPOINTS","$rootScope","AUTH_EVENTS",function($http,Session,AUTH_ENDPOINTS,$rootScope,AUTH_EVENTS){var authService={};return authService.login=function(credentials){return $http.post(AUTH_ENDPOINTS.LOGIN,credentials).then(function(res){return Session.create(res.data.id,res.data.loginName,res.data.roles),res.data})},authService.logout=function(){return $http.get(AUTH_ENDPOINTS.LOGOUT).then(function(){return Session.destroy(),!0})},authService.isAuthenticated=function(){return!!Session.loggedIn},authService.isAuthorized=function(authorizedRoles){if(angular.isArray(authorizedRoles)||(authorizedRoles=[authorizedRoles]),!authService.isAuthenticated())return!1;var found=!1;for(var i in Session.userRoles)if(-1!==authorizedRoles.indexOf(Session.userRoles[i])){found=!0;break}return found},authService.restore=function(){$http.get(AUTH_ENDPOINTS.PROFILE).success(function(user){Session.create(user.id,user.loginName,user.roles),$rootScope.$broadcast(AUTH_EVENTS.loginSuccess)}).error(function(data){console.error(data)})},authService.getLoginName=function(){return Session.loginName},authService.getUserId=function(){return Session.userId},authService}]),security.controller("LoginFormController",["$scope","$rootScope","AUTH_EVENTS","AuthService",function($scope,$rootScope,AUTH_EVENTS,AuthService){$scope.credentials={identifier:"",password:""},$scope.login=function(credentials){$scope.loginLoader=!0,AuthService.login(credentials).then(function(){$scope.loginLoader=!1,$rootScope.$broadcast(AUTH_EVENTS.loginSuccess)},function(errorData){$scope.loginLoader=!1,$scope.loginFailedMessage=errorData,$rootScope.$broadcast(AUTH_EVENTS.loginFailed)})}}]);